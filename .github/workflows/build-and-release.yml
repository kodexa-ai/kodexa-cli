name: Kodexa CLI Python Package

on:
  push:
    branches:
      - main
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: poetry install
      - name: Lint with flake8
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          yes | poetry run mypy --install-types kodexa_cli || true
      - name: Test with pytest and coverage
        run: |
          poetry run pytest --cov=kodexa_cli --cov-report=term-missing

  build-and-release:
    name: Build, Package & Release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Run image
        uses: abatilo/actions-poetry@v2
      - name: Increment version
        id: version
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          VERSION=$(poetry version --short)
          MINOR_PATCH_PART=$(echo $VERSION | awk -F '.' '{print $1"."$2}')
          PATCH_PART=$(echo $VERSION | awk -F '.' '{print substr($NF,1,1)}')
          if [[ $BRANCH_NAME == "fix"* || $BRANCH_NAME == "bugs"* ]]; then
            NEW_LATEST_PATCH_PART=$((PATCH_PART+1))b${GITHUB_RUN_ID}
          elif [[ $BRANCH_NAME == "feature"* ]]; then
            NEW_LATEST_PATCH_PART=$((PATCH_PART+1))a${GITHUB_RUN_ID}
          elif [[ $BRANCH_NAME == "test"* ]]; then
            NEW_LATEST_PATCH_PART=$((PATCH_PART+1))rc${GITHUB_RUN_ID}
          elif [[ $BRANCH_NAME == "main"* ]]; then
            poetry version patch
            VERSION=$(poetry version --short)
            MINOR_PATCH_PART=${VERSION#*.}
            LAST_VERSION_PART_PREFIX=${MINOR_PATCH_PART%??}
            PATCH_PART=${LAST_VERSION_PART_PREFIX%.*}
            NEW_LATEST_PATCH_PART=${PATCH_PART}${GITHUB_RUN_ID}
          else
            echo "Invalid branch name"
            exit 1
          fi
          NEW_VERSION=${VERSION%.*}.${NEW_LATEST_PATCH_PART}
          echo $NEW_VERSION
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "versionType=Release" >> $GITHUB_OUTPUT
          poetry version $NEW_VERSION --no-ansi
      - name: Install dependencies
        run: poetry install
      - name: Lint with flake8
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          yes | poetry run mypy --install-types kodexa_cli || true
      - name: Test with pytest and coverage
        run: |
          poetry run pytest --cov=kodexa_cli --cov-report=term-missing
      - name: Build Package
        run: |
          poetry build
      - name: Publish a Python distribution to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish


  build-executables:
    needs: build-and-release
    name: Build ${{ matrix.os }} Executable
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: kdxa
          - os: macos-latest
            artifact_name: kodexa
          - os: windows-latest
            artifact_name: kodexa.exe
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Run image
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: poetry install
      - name: Build executable
        run: |
          poetry run pyinstaller kodexa-cli.spec
      - name: Rename artifact
        run: |
          mv dist/kodexa* dist/${{ matrix.artifact_name }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}

  create-release:
    needs: [ build-and-release, build-executables ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          tag_name: v${{ needs.build-and-release.outputs.version }}
          name: Release ${{ needs.build-and-release.outputs.version }}
          files: |
            kdxa
            kodexa
            kodexa.exe
